syntax = "proto3";


//import "myProtobufNS/school.proto";
package mySearchNS;

/*In Java, the package name is used as the Java package unless you have explicitly specified a java_package
If you don’t specify this explicitly, it simply matches the package name given by the package declaration,
but these names usually aren’t appropriate Java package names (since they usually don’t start with a domain name).
*/
option java_package = "net.sahet.protobuf.sample.messages";
option java_multiple_files = true;

enum Corpus {
  CORPUS_UNSPECIFIED = 0;
  CORPUS_UNIVERSAL = 1;
  CORPUS_WEB = 2;
  CORPUS_IMAGES = 3;
  CORPUS_LOCAL = 4;
  CORPUS_NEWS = 5;
  CORPUS_PRODUCTS = 6;
  CORPUS_VIDEO = 7;
}

/*
Well-formed Messages
The term “well-formed,” when applied to protobuf messages, refers to the bytes
serialized/deserialized. The protoc parser validates that a given proto definition file is parseable.
 */
message SearchRequest {
  string query = 1;
  int32 page_number = 2;
  int32 results_per_page = 3;
  Corpus corpus = 4;
}


enum EnumAllowingAlias {
  option allow_alias = true;
  EAA_UNSPECIFIED = 0;
  EAA_STARTED = 1;
  EAA_RUNNING = 1;
  EAA_FINISHED = 2;
}

enum EnumNotAllowingAlias {
  ENAA_UNSPECIFIED = 0;
  ENAA_STARTED = 1;
  // ENAA_RUNNING = 1;  // Uncommenting this line will cause a warning message.
  ENAA_FINISHED = 2;
}


message Foo {
  reserved 2, 15, 9 to 11;
  reserved "foo", "bar";
}


/*
You can use other message types as field types. For example, let’s say you wanted to include
Result messages in each SearchResponse message – to do this,
 you can define a Result message type in the same .proto and then specify a
 field of type Result in SearchResponse


 allows re-suing TAG numbers as you wish ...
 */
message SearchResponse {
  repeated Result results = 1;
}

message Result {
  string url = 1;
  string title = 2;
  repeated string snippets = 3;
}


/*
Nested Types
You can define and use message types inside other message types, as in the
following example – here the Result message is defined inside the SearchResponse message:
*/
message SearchResponse2 {
  message Result {
    string url = 1;
    string title = 2;
    repeated string snippets = 3;
  }
  repeated Result results = 1;
}



/**
You can nest messages as deeply as you like. In the example below, note that the
two nested types named Inner are entirely independent, since they are defined within different messages:
*/
message Outer {       // Level 0
  message MiddleAA {  // Level 1
    message Inner {   // Level 2
      int64 ival = 1;
      bool  booly = 2;
    }
  }
  message MiddleBB {  // Level 1
    message Inner {   // Level 2
      int32 ival = 1;
      bool  booly = 2;
    }
  }
}

/**
If you want to reuse this message type outside its parent message type, you refer to it as _Parent_._Type_:
 */
message UusingSomeOtherMessage {
  SearchResponse2.Result result = 1;
  Outer.MiddleAA.Inner inn = 2;

}
