###https://learn.microsoft.com/en-us/aspnet/core/grpc/comparison?view=aspnetcore-8.0
# gRPC messages are serialized using Protobuf, an efficient binary message format.
#gRPC is designed for HTTP/2, a major revision of HTTP that provides significant performance benefits over HTTP 1.x
#Binary framing and compression. HTTP/2 protocol is compact and efficient both in sending and receiving.
#Multiplexing of multiple HTTP/2 calls over a single TCP connection. Multiplexing eliminates head-of-line blocking.
#HTTP/2 is not exclusive to gRPC. Many request types, including HTTP APIs with JSON, can use HTTP/2 and benefit from its performance improvements.

##  It uses HTTP/2 for transport, Protocol Buffers as the interface description language,
## and provides features such as authentication, bidirectional streaming and flow control,
## blocking or nonblocking bindings, and cancellation and timeouts.
#gRPC's complex use of HTTP/2 makes it impossible to implement a gRPC client in the browser, instead of requiring a proxy
# gRPC frameworks generate a service base class, messages, and a complete client
# By sharing the .proto file between the server and client, messages and client code can be generated from end to end.
# Code generation of the client eliminates duplication of messages on the client and server, and creates a strongly-typed client for you.




GRPC localhost/myServicesNS.AnInterface/someMethod

###
GRPC localhost/myServicesNS.AnInterface/secondMethod

###
GRPC localhost/myServicesNS.AnInterface/secondMethod

###
GRPC localhost/myServicesNS.AnInterface/someMethod

###
GRPC localhost/myServicesNS.AnInterface/someMethod
